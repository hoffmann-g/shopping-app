version: '3.8'
services:
  discovery-server:
    container_name: discovery-service-container
    ports:
      - "8761:8761"
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    networks:
      - app-network
      - external-network

  api-gateway:
    container_name: api-gateway-container
    ports:
      - "8060:8060"
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
    environment:
      server.port: 8060
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
    networks:
      - app-network
      - external-network

  cart-service:
    container_name: cart-service-container
    ports:
      - "8061:8061"
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - mongodb
    environment:
      server.port: 8061
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.data.mongodb.uri: mongodb://admin:mongodb@mongodb:27017/cart-service?authSource=admin
    networks:
      - app-network

  coupon-service:
    container_name: coupon-service-container
    ports:
      - "8062:8062"
    build:
      context: ./coupon-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - mongodb
    environment:
      server.port: 8062
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.data.mongodb.uri: mongodb://admin:mongodb@mongodb:27017/coupon-service?authSource=admin
    networks:
      - app-network

  customer-service:
    container_name: customer-service-container
    ports:
      - "8063:8063"
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - mysql
    environment:
      server.port: 8063
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.datasource.url: jdbc:mysql://mysql:3306/customer_service
      spring.datasource.database: customer_service
      spring.datasource.username: root
      spring.datasource.password: admin
    networks:
      - app-network

  order-service:
    container_name: order-service-container
    ports:
      - "8064:8064"
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - mysql
      - broker
    environment:
      server.port: 8064
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.datasource.url: jdbc:mysql://mysql:3306/order_service
      spring.datasource.username: root
      spring.datasource.password: admin
      spring.kafka.bootstrap-servers: broker:29092
    networks:
      - app-network

  payment-service:
    container_name: payment-service-container
    ports:
      - "8065:8065"
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - broker
    environment:
      server.port: 8065
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.kafka.bootstrap-servers: broker:29092
    networks:
      - app-network

  product-service:
    container_name: product-service-container
    ports:
      - "8066:8066"
    build:
      context: ./product-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - mysql
    environment:
      server.port: 8066
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.datasource.url: jdbc:mysql://mysql:3306/product_service
      spring.datasource.username: root
      spring.datasource.password: admin
    networks:
      - app-network

  security-service:
    container_name: security-service-container
    ports:
      - "8067:8067"
    build:
      context: ./security-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - mysql
    environment:
      server.port: 8067
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.datasource.url: jdbc:mysql://mysql:3306/security_service
      spring.datasource.username: root
      spring.datasource.password: admin
    networks:
      - app-network

  stock-service:
    container_name: stock-service-container
    ports:
      - "8068:8068"
    build:
      context: ./stock-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-server
      - api-gateway
      - mongodb
    environment:
      server.port: 8068
      eureka.client.serviceUrl.defaultZone: http://discovery-server:8761/eureka
      spring.data.mongodb.uri: mongodb://admin:mongodb@mongodb:27017/stock-service?authSource=admin
    networks:
      - app-network

  mysql:
    container_name: mysql-container
    command: --default-authentication-plugin=mysql_native_password
    build:
      context: ./_databases/mysql
      dockerfile: Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: admin
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network

  mongodb:
    container_name: mongodb-container
    build:
      context: ./_databases/mongo
      dockerfile: Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: mongodb
    ports:
      - 27017:27017
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  broker:
    image: confluentinc/cp-server:7.7.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - app-network


volumes:
  mysql-data:
  mongodb-data:

networks:
  app-network:
    driver: bridge
    internal: true
  external-network:
    driver: bridge

